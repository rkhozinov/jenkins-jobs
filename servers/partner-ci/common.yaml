- parameter:
    name: common-parameters
    parameters:
      - string:
          name: FUEL_RELEASE_VERSION
          default: '{fuel_release_checker}'
          description: "fuel-qa checks version of fuel, by default fuel-qa sets the value to 9.2"
      - bool:
          name: UPDATE_MASTER
          default: '{update_master}'
          description: "turns on update fuel master node to maintenance update"
      - bool:
          name: ENABLE_PROPOSED
          default: '{enable_proposed}'
          description: 'related to update_master. Turns on support additional repositories for maintenance update'
      - bool:
          name: PUBLISH_RESULTS
          default: '{obj:publish_results}'
          description: 'Reports results to testrail'
      - bool:
          name: DEBUG
          default: '{debug}'
          description: "Set -x (xtrace) for jobs' bash scripts"
      - bool:
          name: FORCE_ERASE
          default: '{force_erase}'
          description: "Erase all envs before test"
      - bool:
          name: FORCE_REUSE
          default: '{force_reuse}'
          description: "enable reuse-only mode for envs, disable force-erasing/snap-reverting"
      - bool:
          name: RECREATE_VENV
          default: '{recreate_venv}'
          description: "Recreate virtual environement before tests, download and install all requirements for venv"
      - bool:
          name: WS_NOREVERT
          default: '{ws_norevert}'
          description: "disable reverting workstation snapshots"
      - bool:
          name: NFS_CLEAN
          default: '{nfs_clean}'
          description: "cleaning nfs-storages"
      - bool:
          name: SKIP_VOTE_FAILED
          default: '{skip_vote_failed}'
          description: "configure gerrit voting"
      - bool:
          name: KVM_USE
          default: '{obj:kvm_use}'
          description: 'turns on kvm_mode for an openstack cluster'
      - bool:
          name: DISCONNECT_ON_FAILURE
          default: False
          description: "disconnect node after failure"
      - string:
          name: FUEL_QA_REFS
          default: '{fuel_qa_refs}'
          description: "Multiple Refspecs for commits in fuel-qa gerrit separated with spaces"
      - string:
          name: MULTI_REFS
          description: "Multiple Refspecs for commits in plugin-repo gerrit separated with spaces"
      - string:
          name: MIRROR_HOST
          default: 'mirror.seed-cz1.fuel-infra.org'
          description: 'mirror for package repositories. this mirror is optimized for CZ'
      - string:
          name: SNAPSHOTS_ID
          default: '{snapshots_id}'
          description: 'snapshots number, "lastSuccessfulBuild" or "released"'
      - string:
          name: SNAPSHOTS_URL
          default: 'https://product-ci.infra.mirantis.net/job/9.x.snapshot/SNAPSHOTS_ID/artifact/snapshots.params'
          description: 'url to product-ci job with snapshots artifacts'
      - string:
          name: ISO_FILE
          default: '{iso_file}'
          description: 'ISO file name that is on the tpi-s1 in /storage/downloads'
      - string:
          name: GERRIT_REFSPEC
          default: 'refs/heads/{gerrit_branch}'
          description: 'Single Refspec for commits in plugin repo gerrit'
      - string:
          name: GERRIT_BRANCH
          default: 'origin/{gerrit_branch}'
          description: 'The branch for fuel-qa gerrit'
      - string:
          name: PKG_JOB_NAME
          default: '{pkg_job_name}'
          description: 'The name of job for copying of plugin pkg artefacts'
      - string:
          name: PKG_JOB_BUILD_NUMBER
          default: '{pkg_job_build_number}'
          description: 'The name of job for copying of plugin pkg artefacts'
      - string:
          name: ENV_PREFIX
          default: '{env_prefix}'
          description: 'The name of environment'
      - string:
          name: PLUGIN_VERSION
          default: '{plugin_version}'
      - text:
          name: COMMON_PROPS
          default: |
            ADMIN_NODE_CPU=4;
            ADMIN_NODE_MEMORY=4096;
            ALWAYS_CREATE_DIAGNOSTIC_SNAPSHOT=true;
            CONV_SNAP_PATH=plugin_test/fuel-qa/utils/jenkins/conv_snapshot_file.py;
            DEBUG_MODE=true;
            DESTROY_ENV_AFTER=0;
            DISABLE_SSL=true;
            DRIVER_ENABLE_ACPI=true;
            ESXI_PASSWORD=swordfish;
            ESXI_USER=root;
            FORCE_DISABLE_UPDATES=false;
            FUEL_STATS_ENABLED=false;
            GIT_CURL_VERBOSE=false;
            ISO_STORAGE=/storage/downloads;
            MAKE_SNAPSHOT=true;
            NODES_COUNT=10;
            OPENSTACK_RELEASE=Ubuntu;
            SLAVE_NODE_CPU=4;
            SLAVE_NODE_MEMORY=4096;
            SNAPSHOT_ARTIFACTS_FILE=snapshots.params;
            SNAPSHOT_OUTPUT_FILE=extra_repos.sh;
            WORKSTATION_PASSWORD=VMware01;
            WORKSTATION_USERNAME=vmware;
            REQUIRED_FREE_SPACE=200;

- parameter:
    name: ui-parameters
    parameters:
      - string:
          name: FUEL_UI_BRANCH
          default: '{fuel_ui_branch}'
      - string:
          name: FUEL_UI_REFS
          default: '{fuel_ui_refs}'
          description: "Multiple Refspecs for commits in fuel-ui gerrit separated with spaces"
      - string:
          name: DOCKER_BRANCH
          default: '{docker_branch}'

- parameter:
    name: common-fuel-parameters
    parameters:
      - bool:
          name: UPDATE_MASTER
          default: '{update_master}'
          description: "turns on update fuel master node to maintenance update"
      - bool:
          name: ENABLE_PROPOSED
          default: '{enable_proposed}'
          description: 'related to update_master. Turns on support additional repositories for maintenance update'
      - bool:
          name: PUBLISH_RESULTS
          default: '{obj:publish_results}'
          description: 'Reports results to testrail'
      - bool:
          name: DEBUG
          default: '{debug}'
          description: "Set -x (xtrace) for jobs' bash scripts"
      - bool:
          name: FORCE_ERASE
          default: '{force_erase}'
          description: "Erase all envs before test"
      - bool:
          name: FORCE_REUSE
          default: '{force_reuse}'
          description: "enable reuse-only mode for envs, disable force-erasing/snap-reverting"
      - bool:
          name: RECREATE_VENV
          default: '{recreate_venv}'
          description: "Recreate virtual environemnt before tests"
      - bool:
          name: SKIP_VOTE_FAILED
          default: '{skip_vote_failed}'
          description: "configure gerrit voting"
      - bool:
          name: DISCONNECT_ON_FAILURE
          default: False
          description: "disconnect node after failure"
      - string:
          name: FUEL_QA_BRANCH
          default: '{fuel_qa_branch}'
      - string:
          name: FUEL_QA_REFS
          description: "Multiple Refspecs for commits in fuel-qa gerrit separated with spaces"
      - string:
          name: NAILGUN_HOST
      - string:
          name: ISO_JOB_BUILD_NUMBER
          description: "Fuel10 depends on ubuntu-mirror snapshots, it's a build of ISO_JOB_NAME"
      - text:
          name: COMMON_PROPS
          default: |
            ADMIN_NODE_CPU=4;
            ADMIN_NODE_MEMORY=3968;
            ALWAYS_CREATE_DIAGNOSTIC_SNAPSHOT=true;
            CONV_SNAP_PATH=plugin_test/fuel-qa/utils/jenkins/conv_snapshot_file.py;
            DEBUG_MODE=true;
            DESTROY_ENV_AFTER=0;
            DISABLE_SSL=true;
            DRIVER_ENABLE_ACPI=true;
            ENV_PREFIX={env_prefix};
            FORCE_DISABLE_UPDATES=false;
            FUEL_RELEASE_VERSION={fuel_release_checker};
            FUEL_STATS_ENABLED=false;
            GIT_CURL_VERBOSE=false;
            ISO_STORAGE=/storage/downloads;
            ISO_JOB_NAME=download_iso;
            KVM_USE={kvm_use};
            MAKE_SNAPSHOT=true;
            MIRROR_HOST=http://mirror.seed-cz1.fuel-infra.org/pkgs/snapshots/;
            NODES_COUNT=10;
            OPENSTACK_RELEASE=Ubuntu;
            SLAVE_NODE_CPU=4;
            SLAVE_NODE_MEMORY=3968;
            REQUIRED_FREE_SPACE=200;

- parameter:
    name: vcenter-specific-parameters
    parameters:
      - text:
          name: SPECIFIC_PROPS
          default: |
            ADMIN_NODE_MEMORY=8192;
            CLEAN_IPTABLES=true;
            CONV_SNAP_PATH=utils/jenkins/conv_snapshot_file.py;
            DISABLE_STP=true;
            ESXI_HOSTS=172.16.0.250 172.16.0.252 172.16.0.253;
            FORCE_DISABLE_UPDATES=false;
            NFS_SERVER=172.16.0.1;
            NFS_SHARES=nfs nfs2;
            SLAVE_NODE_MEMORY=8192;
            VCENTER_CERT_BYPASS=True;
            VCENTER_CERT_URL="http://tpi-s2.bud.mirantis.net:5000/downloads/certs/server.pem";
            VCENTER_CLUSTERS=Cluster1,Cluster2;
            VCENTER_DATACENTER=Datacenter;
            VCENTER_DATASTORE=nfs;
            VCENTER_GLANCE_CERT_BYPASS=True;
            VCENTER_GLANCE_CERT_URL="http://tpi-s2.bud.mirantis.net:5000/downloads/certs/server.pem";
            VCENTER_GLANCE_IP=172.16.0.145;
            VCENTER_GLANCE_PASSWORD=vmware;
            VCENTER_GLANCE_USERNAME=openstack;
            VCENTER_IP=172.16.0.145;
            VCENTER_PASSWORD=vmware;
            VCENTER_USE=true;
            VCENTER_USERNAME=openstack;
            VC_IMAGE_DIR=openstack_glance;
            VMWARE_IMG_LOGIN=root;
            VMWARE_IMG_NAME=shaker.vmdk;
            VMWARE_IMG_PASSWORD=r00tme;
            VMWARE_IMG_URL="http://pce-storage.bud.mirantis.net:5000/distr/$VMWARE_IMG_NAME";
            VSPHERE_VERSION=5.5;
            WORKSTATION_IFS=vmnet2,vmnet3,vmnet4;
            WORKSTATION_NODES=esxi1 esxi2 esxi3 vcenter;
            WORKSTATION_PASSWORD=VMware01;
            WORKSTATION_SNAPSHOT=doubledvs;
            WORKSTATION_USERNAME=vmware;

- publisher:
    name: runner-publisher
    publishers:
      - postbuildscript:
          script-only-if-succeeded: False
          builders:
            - shell: env > {properties_name}
      - archive:
          artifacts: '*.properties'
          allow-empty: true
      - archive:
          artifacts: 'build.plugin_version'
          allow-empty: true
      - email:
          recipients: '{email_to}'

- publisher:
    name: reporter-publisher
    publishers:
      - postbuildscript:
          script-only-if-succeeded: False
          builders:
            - shell: env | egrep -v "(KEY|PWD|PASSW|COOKIE)" > {properties_name}
      - archive:
          artifacts: '*.properties'
          allow-empty: true
      - archive:
          artifacts: 'nosetests.xml'
          allow-empty: true
      - email:
          recipients: '{email_to}'
      - description-setter:
          regexp: '^\[TestRun URL\] (.*)'
          regexp-for-failed: '"error":(.*) \1 "AssertionError":(.*) \2'
          description: '<a href="\1">TestRail Report URL</a>'
          description-for-failed: '\1'

- publisher:
    name: pce-build-publisher
    publishers:
      - postbuildscript:
          script-only-if-succeeded: False
          builders:
            - shell: |
                #!/bin/bash
                plugin_version=$(grep '^version' metadata.yaml | cut -d ' ' -f2)
                version=$(echo PLUGIN_VERSION=${{plugin_version}} | tr -d "'")
                echo $version > build.plugin_version
                env > build.properties
                echo $version >> build.properties
      - archive:
          artifacts: '*.rpm'
          allow-empty: false
      - archive:
          artifacts: '*.properties'
          allow-empty: false
      - archive:
          artifacts: 'build.plugin_version'
          allow-empty: false
      - email:
          recipients: '{email_to}'
      - description-setter:
          regexp-for-failed: '"error":(.*) \1 "AssertionError":(.*) \2'
          description-for-failed: '\1 \2'

- publisher:
    name: generic-build-publisher
    publishers:
      - postbuildscript:
          script-only-if-succeeded: False
          builders:
            - shell: |
                #!/bin/bash
                plugin_version=$(grep '^version' metadata.yaml | cut -d ' ' -f2)
                version=$(echo PLUGIN_VERSION=${{plugin_version}} | tr -d "'")
                echo $version > {plugin_name}.plugin_version
                env > build.properties
                echo $version >> {plugin_name}.properties
      - archive:
          artifacts: '*.rpm'
          allow-empty: false
      - archive:
          artifacts: '{plugin_name}.properties'
          allow-empty: false
      - archive:
          artifacts: '{plugin_name}.plugin_version'
          allow-empty: false
      - email:
          recipients: '{email_to}'
      - description-setter:
          regexp-for-failed: '"error":(.*) \1 "AssertionError":(.*) \2'
          description-for-failed: '\1 \2'

- publisher:
    name: doc-publisher
    publishers:
      - description-setter:
          regexp-for-failed: '^Exception:.*'
      - email:
          recipients: '{email_to}'

- publisher:
    name: test-publisher
    publishers:
      - description-setter:
          regexp-for-failed: '^ERROR:.*'
      - archive:
          artifacts: 'logs/**'
          allow-empty: true
      - archive:
          artifacts: '**.log'
          allow-empty: true
      - archive:
          artifacts: '**.tar.xz'
          allow-empty: true
      - archive:
          artifacts: '**.tar.gz'
          allow-empty: true
      - conditional-publisher:
          - condition-kind: file-exists
            condition-filename: 'nosetests.xml'
            action:
              - xunit:
                  types:
                    - junit:
                        pattern: 'nosetests.xml'
                        skip-if-no-test-files: true
              - junit:
                  results: 'nosetests.xml'
                  health-scale-factor: 1.0
              - archive:
                  artifacts: 'nosetests.xml'
                  allow-empty: false
      - postbuildscript:
          script-only-if-succeeded: False
          script-only-if-failed: False
          builders:
              - shell: |
                  rm -rf *.rpm
                  sudo cp /var/log/libvirt/libvirtd.log ${{WORKSPACE}}/libvirtd_total.log
                  sudo chown jenkins:jenkins ${{WORKSPACE}}/libvirtd_total.log
      - postbuildscript:
          script-only-if-succeeded: False
          script-only-if-failed: True
          builders:
              - shell: |
                  [[ "${{DISCONNECT_ON_FAILURE}}" == "true" ]] && \
                  python -c "import jenkins; jenkins.Jenkins(\"${{JENKINS_URL}}\", username=\"${{JENKINS_USERNAME}}\", password=\"${{JENKINS_PASSWORD}}\").disable_node(\"${{NODE_NAME}}\")"
      - description-setter:
          regexp-for-failed: '"error":(.*) \1 "AssertionError":(.*) \2'
          description-for-failed: '\1 \2'
      - slack:
          notify-success: True
          notify-failure: True
          commit-info-choice: 'AUTHORS_AND_TITLES'
          include-test-summary: True
          build-server-url: 'http://jenkins-tpi.bud.mirantis.net:8080/'
      - conditional-publisher:
          - condition-kind: boolean-expression
            condition-expression: "${{PUBLISH_RESULTS}}"
            action:
              - trigger-parameterized-builds:
                  - project: '{reporter_name}'
                    property-file: reporter.properties
                    fail-on-missing: true
                    condition: FAILED_OR_BETTER

- publisher:
    name: ui-publisher
    publishers:
      - postbuildscript:
          script-only-if-succeeded: False
          builders:
            - shell: env > {properties_name}
      - archive:
          artifacts: '*.properties'
          allow-empty: true
      - archive:
          artifacts: 'fuel-ui/*.log'
          allow-empty: true
      - archive:
          artifacts: 'fuel-ui/test_run/**'
          allow-empty: true
      - email:
          recipients: '{email_to}'
      - description-setter:
          regexp-for-failed: '^ERROR:.*'
      - postbuildscript:
          script-only-if-succeeded: False
          script-only-if-failed: False
          builders:
            - shell:
                !include-raw-escape: builders/ui.converter.sh
            - shell: |
                path=$(find fuel-ui/test_run/ -name '*.xml')
                python converter.py $path ${{WORKSPACE}}/nosetests.xml
      - conditional-publisher:
          - condition-kind: file-exists
            condition-filename: 'nosetests.xml'
            action:
              - archive:
                  artifacts: 'nosetests.xml'
                  allow-empty: false
      - junit:
          results: '**/test_run/feature_nics/*.xml'
          health-scale-factor: 1.0
      - postbuildscript:
          script-only-if-succeeded: False
          script-only-if-failed: True
          builders:
              - shell: |
                  [[ "${{DISCONNECT_ON_FAILURE}}" == "true" ]] && \
                  python -c "import jenkins; jenkins.Jenkins(\"${{JENKINS_URL}}\", username=\"${{JENKINS_USERNAME}}\", password=\"${{JENKINS_PASSWORD}}\").disable_node(\"${{NODE_NAME}}\")"
      - description-setter:
          regexp-for-failed: '"error":(.*) \1 "AssertionError":(.*) \2'
          description-for-failed: '\1 \2'
      - slack:
          notify-success: True
          notify-failure: True
          commit-info-choice: 'AUTHORS_AND_TITLES'
          include-test-summary: True
          build-server-url: 'http://jenkins-tpi.bud.mirantis.net:8080/'
      - conditional-publisher:
          - condition-kind: boolean-expression
            condition-expression: "${{PUBLISH_RESULTS}}"
            action:
              - trigger-parameterized-builds:
                  - project: '{reporter_name}'
                    property-file: reporter.properties
                    fail-on-missing: true
                    condition: FAILED_OR_BETTER

- builder:
    name: 10-get-refs
    builders:
      - shell: |
          #!/bin/bash
          if [[ "${FUEL_QA_REFS}" != "none" ]]; then
            cd ${WORKSPACE}/plugin_test/fuel-qa
            FUEL_QA_GIT_URL=$(git config --get remote.origin.url)
            for refspec in ${FUEL_QA_REFS}; do
              git fetch ${FUEL_QA_GIT_URL} "$refspec" && git cherry-pick FETCH_HEAD || { git status; exit 1; }
              git log --pretty=oneline | head
            done
          fi
          if [[ "${MULTI_REFS}" != "none" ]]; then
            cd ${WORKSPACE}
            for refspec in ${MULTI_REFS}; do
              git fetch ${GIT_URL} "$refspec" && git cherry-pick FETCH_HEAD || { git status; exit 1; }
              git log --pretty=oneline | head
            done
          fi

- builder:
    name: 10-get-ui-refs
    builders:
      - shell: |
          #!/bin/bash
          cherrypick() {
              git_url=$1
              ref=$2
              git fetch $git_url "$ref" && git cherry-pick FETCH_HEAD || { git status; exit 1; }
              git log --pretty=oneline | head
          }
          if [[ ! -z "${FUEL_UI_REFS}" ]]; then
            cd ${WORKSPACE}/fuel-ui
            git_url=$(git config --get remote.origin.url)
            for ref in ${FUEL_UI_REFS:?}; do cherrypick $git_url $ref; done
          fi
          if [[ ! -z "${FUEL_QA_REFS}" ]]; then
            cd ${WORKSPACE}/fuel-qa
            git_url=$(git config --get remote.origin.url)
            for ref in ${FUEL_QA_REFS:?}; do cherrypick $git_url $ref; done
          fi

- builder:
    name: 10-get-vcenter-refs
    builders:
      - shell: |
          #!/bin/bash
          cherrypick() {
              git_url=$1
              ref=$2
              git fetch $git_url "$ref" && git cherry-pick FETCH_HEAD || { git status; exit 1; }
              git log --pretty=oneline | head
          }
          if [[ ! -z "${FUEL_QA_REFS}" ]]; then
            cd ${WORKSPACE}
            git_url=$(git config --get remote.origin.url)
            for ref in ${FUEL_QA_REFS:?}; do cherrypick $git_url $ref; done
          fi

- builder:
    name: 20-get-props
    builders:
      - shell: |
          #!/bin/bash
          BACKUP_IFS=$IFS
          IFS=';'
          echo > common.properties
          if [ ! -z "${COMMON_PROPS}" ]; then
            for param in ${COMMON_PROPS}; do
              echo $param >> common.properties
            done
          fi
          echo > specific.properties
          if [ ! -z "${SPECIFIC_PROPS}" ]; then
            for param in ${SPECIFIC_PROPS}; do
              echo $param >> specific.properties
            done
          fi
          IFS=$BACKUP_IFS
      - inject:
          properties-file: common.properties
      - inject:
          properties-file: specific.properties

- builder:
    name: 21-get-baremetal-props
    builders:
      - inject:
          properties-content: |
            BM_HOST_BRIDGE_INTERFACES=eth2:10.109.0.0/24;eth3:10.109.4.0/24
            BM_IPMI_ADDR=cz7660-kvm.host-telecom.com
            BM_IPMI_PASSWORD=Ba2Ie23#GHgho
            BM_IPMI_USER=engineer
            BM_TARGET_MACS=00:1b:21:87:21:99;00:1b:21:87:21:98

- builder:
    name: 30-get-snapshots
    builders:
      - conditional-step:
          condition-kind: shell
          condition-command: |
            [[ "${SNAPSHOTS_ID}" != *"released"* ]]
          steps:
            - inject:
                properties-content: |
                  ENABLE_MOS_CENTOS_OS=true
                  ENABLE_MOS_CENTOS_PROPOSED=$ENABLE_PROPOSED
                  ENABLE_MOS_CENTOS_UPDATES=true
                  ENABLE_MOS_CENTOS_HOLDBACK=true
                  ENABLE_MOS_CENTOS_HOTFIX=false
                  ENABLE_MOS_CENTOS_SECURITY=true
                  ENABLE_MOS_UBUNTU_OS=true
                  ENABLE_MOS_UBUNTU_PROPOSED=$ENABLE_PROPOSED
                  ENABLE_MOS_UBUNTU_UPDATES=true
                  ENABLE_MOS_UBUNTU_HOLDBACK=true
                  ENABLE_MOS_UBUNTU_HOTFIX=false
                  ENABLE_MOS_UBUNTU_SECURITY=true

            - shell: |
                #!/bin/bash -xeu
                wget --no-check-certificate -O ${SNAPSHOT_ARTIFACTS_FILE:?} \
                ${SNAPSHOTS_URL/SNAPSHOTS_ID/${SNAPSHOTS_ID:?}}
                snapshots_id=$(grep "^CUSTOM_VERSION=" < snapshots.params | cut -d= -f2 | cut -d'#' -f2)
                echo "snapshot_id_number=${snapshots_id}"
                python "${CONV_SNAP_PATH:?}"

                . $SNAPSHOT_OUTPUT_FILE
                mos_centos_proposed_mirror_id=$(grep "^MOS_CENTOS_PROPOSED_MIRROR_ID" < snapshots.params | cut -d= -f2)
                mos_ubuntu_mirror_id=$(grep "^MOS_UBUNTU_MIRROR_ID" < snapshots.params | cut -d= -f2)

                cat << GET_SNAPSHOTS >> get-snapshots.properties
                EXTRA_RPM_REPOS=${EXTRA_RPM_REPOS}
                UPDATE_FUEL_MIRROR=${UPDATE_FUEL_MIRROR}
                EXTRA_DEB_REPOS=${EXTRA_DEB_REPOS}
                MOS_UBUNTU_MIRROR_ID=${mos_ubuntu_mirror_id:?}
                MOS_CENTOS_PROPOSED_MIRROR_ID=${mos_centos_proposed_mirror_id:?}
                GET_SNAPSHOTS
            - inject:
                properties-file: get-snapshots.properties

- builder:
    name: 30-get-ubuntu-mirror
    builders:
      - conditional-step:
          condition-kind: shell
          condition-command: >
            [ -z  ${ISO_JOB_BUILD_NUMBER} ]
          steps:
            - copyartifact:
                project: ${ISO_JOB_NAME}
                which-build: last-successful
      - conditional-step:
          condition-kind: shell
          condition-command: >
            [ ! -z ${ISO_JOB_BUILD_NUMBER} ]
          steps:
            - copyartifact:
                project: ${ISO_JOB_NAME}
                which-build: specific-build
                build-number: ${ISO_JOB_BUILD_NUMBER}
      - inject:
          properties-file: properties_file.txt
      - shell: |
          #!/bin/bash -xeu
          UBUNTU_MIRROR_URL="${MIRROR_HOST:?}${UBUNTU_MIRROR_ID:?}/"

          UBUNTU_REPOS="deb ${UBUNTU_MIRROR_URL} ${UBUNTU_DIST:?} main universe multiverse|deb ${UBUNTU_MIRROR_URL} ${UBUNTU_DIST}-updates main universe multiverse|deb ${UBUNTU_MIRROR_URL} ${UBUNTU_DIST}-security main universe multiverse"

          ENABLE_PROPOSED="${ENABLE_PROPOSED:-true}"

          if [ "$ENABLE_PROPOSED" = true ]; then
              UBUNTU_PROPOSED="deb ${UBUNTU_MIRROR_URL} ${UBUNTU_DIST}-proposed main universe multiverse"
              UBUNTU_REPOS="$UBUNTU_REPOS|$UBUNTU_PROPOSED"
          fi

          echo "MIRROR_UBUNTU=${UBUNTU_REPOS:?}" >> get-ubuntu-mirror.properties
          echo "SNAPSHOTS_ID=$(echo $ISO_FILE | cut -d- -f3 | tr -d '.iso')" >> get-ubuntu-mirror.properties
      - inject:
          properties-file: get-ubuntu-mirror.properties

- builder:
    name: 40-get-env-variables
    builders:
      - shell: |
          # determine release specific variables
          case "${ISO_FILE:?}" in
            *fuel-10.0* )
                    export FUEL_RELEASE=100
                    export REQS_BRANCH="stable/newton" ;;

            *MirantisOpenStack-9.0* | *fuel-9.0* )
                    export FUEL_RELEASE=90
                    export REQS_BRANCH="stable/mitaka" ;;

            *MirantisOpenStack-8.0* | *fuel-8.0* )
                    export FUEL_RELEASE=80
                    export REQS_BRANCH="stable/8.0" ;;

            *MirantisOpenStack-7.0* | *fuel-7.0* )
                    export FUEL_RELEASE=70
                    export REQS_BRANCH="stable/7.0" ;;

            *MirantisOpenStack-6.1* | *fuel-6.1* )
                    export FUEL_RELEASE=61
                    export REQS_BRANCH="stable/6.1" ;;

            * )
                    export FUEL_RELEASE=90
                    export SNAPSHOTS_ID="released"
                    export REQS_BRANCH="stable/mitaka" ;;
          esac

          venv_path="$HOME/${FUEL_RELEASE:?}-venv"

          cat << GET_ENV >> get-env-variables.properties
          REQS_BRANCH=${REQS_BRANCH:?}
          FUEL_RELEASE=${FUEL_RELEASE:?}
          ISO_PATH=${ISO_STORAGE:?}/${ISO_FILE:?}
          ENV_NAME=${ENV_PREFIX:?}.${SNAPSHOTS_ID:?}
          VENV_PATH=${VENV_PATH:-$venv_path}
          GET_ENV
      - inject:
          properties-file: get-env-variables.properties

- builder:
    name: ui-condition
    builders:
      - conditional-step:
          condition-kind: shell
          condition-command: |
            [[ "${UPDATE_MASTER}" == "true" ]] && [[ $SNAPSHOTS_ID != *"released"* ]]
          steps:
            - shell: |
                #!/bin/bash
                SNAPSHOTS_ID=${SNAPSHOTS_ID:=lastSuccessfulBuild}
                wget --no-check-certificate -O snapshots.params ${SNAPSHOTS_URL/SNAPSHOTS_ID/$SNAPSHOTS_ID}
                snapshots_id=$(grep "^CUSTOM_VERSION=" < snapshots.params | cut -d= -f2 | cut -d'#' -f2)
                echo "snapshot_id_number=" $snapshots_id
                echo "SNAPSHOTS_ID=${snapshots_id}" >> build_number

- builder:
    name: runner-condition
    builders:
      - conditional-step:
          condition-kind: shell
          condition-command: |
            #!/bin/bash -xe
            if [ "${MJ_BUILD_PKG}" == "true" ]; then
              if [ -z  ${PKG_JOB_BUILD_NUMBER} ]; then
                echo "Plugin will be built"
                exit 0
              fi
            else
              echo "Plugin won't be built"
              exit 1
            fi
          steps:
            - trigger-builds:
                - project: ${PKG_JOB_NAME}
                  current-parameters: false
                  git-revision: false
                  block: true
      - conditional-step:
          condition-kind: shell
          condition-command: >
            [ -z  ${PKG_JOB_BUILD_NUMBER} ]
          steps:
            - copyartifact:
                project: ${PKG_JOB_NAME}
                filter: "build.properties"
                which-build: last-successful
      - conditional-step:
          condition-kind: shell
          condition-command: >
            [ ! -z ${PKG_JOB_BUILD_NUMBER} ]
          steps:
            - copyartifact:
                project: ${PKG_JOB_NAME}
                filter: "build.properties"
                which-build: specific-build
                build-number: ${PKG_JOB_BUILD_NUMBER}
      - conditional-step:
          condition-kind: file-exists
          condition-filename: "build.properties"
          steps:
            - shell: |
                #!/bin/bash
                build_number=$(grep "^BUILD_NUMBER=" < build.properties | cut -d= -f2)
                echo "PKG_JOB_BUILD_NUMBER=$build_number" > build_number
      - conditional-step:
          condition-kind: shell
          condition-command: |
            [[ "${UPDATE_MASTER}" == "true" ]] && [[ $SNAPSHOTS_ID != *"released"* ]]
          steps:
            - shell: |
                #!/bin/bash
                SNAPSHOTS_ID=${SNAPSHOTS_ID:=lastSuccessfulBuild}
                wget --no-check-certificate -O snapshots.params ${SNAPSHOTS_URL/SNAPSHOTS_ID/$SNAPSHOTS_ID}
                snapshots_id=$(grep "^CUSTOM_VERSION=" < snapshots.params | cut -d= -f2 | cut -d'#' -f2)
                echo "snapshot_id_number=" $snapshots_id
                echo "SNAPSHOTS_ID=${snapshots_id}" >> build_number

- scm:
    name: common-scm
    scm:
      - git:
          url: 'https://review.openstack.org/openstack/{gerrit_repo}'
          refspec: $GERRIT_REFSPEC
          branches:
            - $GERRIT_BRANCH
          choosing-strategy: gerrit
          skip-tag: true
          submodule:
            disable: '{obj:scm_submodule_disabled}'
            tracking: true
            recursive: true
          wipe-workspace: '{obj:scm_wipe_workspace}'

- trigger:
    name: test-gerrit-trigger
    triggers:
      - gerrit:
         trigger-on: '{obj:trigger_on}'
         projects:
           - project-compare-type: 'PLAIN'
             project-pattern: 'openstack/{gerrit_repo}'
             branches:
               - branch-compare-type: 'ANT'
                 branch-pattern: '{gerrit_branch}'
             file-paths:
               - compare-type: 'ANT'
                 pattern: 'plugin_test/**'
             disable-strict-forbidden-file-verification: true
         silent: false
         override-votes: true
         server-name: 'review.openstack.org'
         custom-url: '* $JOB_NAME $BUILD_URL'
         escape-quotes: true
         readable-message: true
         skip-vote:
           successfull: '{skip_vote_successfull}'
           failed: '{skip_vote_failed}'
           unstable: true
           notbuilt: true

- trigger:
    name: default-gerrit-trigger
    triggers:
      - gerrit:
         trigger-on: '{obj:trigger_on}'
         projects:
           - project-compare-type: 'PLAIN'
             project-pattern: 'openstack/{gerrit_repo}'
             branches:
               - branch-compare-type: 'ANT'
                 branch-pattern: '{gerrit_branch}'
         silent: false
         override-votes: true
         server-name: 'review.openstack.org'
         custom-url: '* $JOB_NAME $BUILD_URL'
         escape-quotes: true
         readable-message: true
         skip-vote:
           successfull: '{skip_vote_successfull}'
           failed: '{skip_vote_failed}'
           unstable: true
           notbuilt: true

- trigger:
    name: doc-gerrit-trigger
    triggers:
      - gerrit:
         trigger-on: '{obj:trigger_on}'
         projects:
           - project-compare-type: 'PLAIN'
             project-pattern: 'openstack/{gerrit_repo}'
             branches:
               - branch-compare-type: 'ANT'
                 branch-pattern: '{gerrit_branch}'
             file-paths:
               - compare-type: 'ANT'
                 pattern: 'doc/**'
               - compare-type: 'ANT'
                 pattern: 'docs/**'
             disable-strict-forbidden-file-verification: true
         silent: false
         override-votes: true
         server-name: 'review.openstack.org'
         custom-url: '* $JOB_NAME $BUILD_URL'
         escape-quotes: true
         readable-message: true
         skip-vote:
           successfull: '{skip_vote_successfull}'
           failed: '{skip_vote_failed}'
           unstable: true
           notbuilt: true

- trigger:
    name: generic-gerrit-trigger
    triggers:
      - gerrit:
         trigger-on: '{obj:trigger_on}'
         projects:
           - project-compare-type: 'PLAIN'
             project-pattern: 'openstack/{gerrit_repo}'
             branches:
               - branch-compare-type: 'ANT'
                 branch-pattern: '{gerrit_branch}'
             forbidden-file-paths:
               - compare-type: 'ANT'
                 pattern: 'doc/**'
               - compare-type: 'ANT'
                 pattern: 'docs/**'
               - compare-type: 'ANT'
                 pattern: 'specs/**'
             disable-strict-forbidden-file-verification: true
         silent: false
         override-votes: true
         server-name: 'review.openstack.org'
         custom-url: '* $JOB_NAME $BUILD_URL'
         escape-quotes: true
         readable-message: true
         skip-vote:
           successfull: '{skip_vote_successfull}'
           failed: '{skip_vote_failed}'
           unstable: true
           notbuilt: true

- trigger:
    name: draft-test-gerrit-trigger
    triggers:
      - test-gerrit-trigger:
          gerrit_repo: '{gerrit_repo}'
          gerrit_branch: '{gerrit_branch}'
          skip_vote_successfull: '{skip_vote_successfull}'
          skip_vote_failed: '{skip_vote_failed}'
          trigger_on:
            - draft-published-event
            - comment-added-contains-event:
                comment-contains-value: 'recheck'
            - patchset-created-event:
                exclude-trivial-rebase: false
                exclude-no-code-change: true

- trigger:
    name: merge-gerrit-trigger
    triggers:
      - generic-gerrit-trigger:
          gerrit_repo: '{gerrit_repo}'
          gerrit_branch: '{gerrit_branch}'
          skip_vote_successfull: '{skip_vote_successfull}'
          skip_vote_failed: '{skip_vote_failed}'
          trigger_on:
            - comment-added-contains-event:
                comment-contains-value: 'recheck'
            - change-merged-event

- trigger:
    name: default-merge-trigger
    triggers:
      - default-gerrit-trigger:
          gerrit_repo: '{gerrit_repo}'
          gerrit_branch: '{gerrit_branch}'
          skip_vote_successfull: '{skip_vote_successfull}'
          skip_vote_failed: '{skip_vote_failed}'
          trigger_on:
            - comment-added-contains-event:
                comment-contains-value: 'recheck'
            - change-merged-event

- trigger:
    name: default-draft-trigger
    triggers:
      - default-gerrit-trigger:
          gerrit_repo: '{gerrit_repo}'
          gerrit_branch: '{gerrit_branch}'
          skip_vote_successfull: '{skip_vote_successfull}'
          skip_vote_failed: '{skip_vote_failed}'
          trigger_on:
            - draft-published-event
            - comment-added-contains-event:
                comment-contains-value: 'recheck'
            - patchset-created-event:
                exclude-trivial-rebase: false
                exclude-no-code-change: true
          projects:
            - project-compare-type: 'PLAIN'
              project-pattern: 'openstack/{gerrit_repo}'
              branches:
                - branch-compare-type: 'ANT'
                  branch-pattern: '{gerrit_branch}'
              forbidden-file-paths:
                - compare-type: 'ANT'
                  pattern: 'plugin_test/**'
                - compare-type: 'ANT'
                  pattern: 'doc/**'
                - compare-type: 'ANT'
                  pattern: 'spec/**'

- trigger:
    name: draft-gerrit-trigger
    triggers:
      - generic-gerrit-trigger:
          gerrit_repo: '{gerrit_repo}'
          gerrit_branch: '{gerrit_branch}'
          skip_vote_successfull: '{skip_vote_successfull}'
          skip_vote_failed: '{skip_vote_failed}'
          trigger_on:
            - draft-published-event
            - comment-added-contains-event:
                comment-contains-value: 'recheck'
            - patchset-created-event:
                exclude-trivial-rebase: false
                exclude-no-code-change: true

- trigger:
    name: draft-doc-trigger
    triggers:
      - doc-gerrit-trigger:
          gerrit_repo: '{gerrit_repo}'
          gerrit_branch: '{gerrit_branch}'
          skip_vote_successfull: '{skip_vote_successfull}'
          skip_vote_failed: '{skip_vote_failed}'
          trigger_on:
            - draft-published-event
            - comment-added-contains-event:
                comment-contains-value: 'recheck'
            - patchset-created-event:
                exclude-trivial-rebase: false
                exclude-no-code-change: true

- trigger:
    name: merge-doc-trigger
    triggers:
      - doc-gerrit-trigger:
          gerrit_repo: '{gerrit_repo}'
          gerrit_branch: '{gerrit_branch}'
          skip_vote_successfull: '{skip_vote_successfull}'
          skip_vote_failed: '{skip_vote_failed}'
          trigger_on:
            - comment-added-contains-event:
                comment-contains-value: 'recheck'
            - change-merged-event

- wrapper:
    name: runner-wrapper
    wrappers:
      - ansicolor:
          colormap: xterm
      - timeout:
          timeout: 600
          fail: true
          type: no-activity
          write-description: "Runner-timeout is exceeded"

- wrapper:
    name: test-wrapper
    wrappers:
      - ansicolor:
          colormap: xterm
      - inject-passwords:
          global: true
          mask-password-params: true
      - timeout:
          timeout: 300
          fail: true
          type: no-activity
          write-description: "Test-timeout is exceeded"
      - workspace-cleanup:
          include:
            - "*.xml"
            - "*.log"
          dirmatch: true

- property:
    name: ui-runner-property
    properties:
      - build-discarder:
          days-to-keep: 40
          num-to-keep: 40
          artifact-days-to-keep: 30
          artifact-num-to-keep: 20
      - heavy-job:
          weight: 1

- property:
    name: runner-property
    properties:
      - build-discarder:
          days-to-keep: 40
          num-to-keep: 40
          artifact-days-to-keep: 30
          artifact-num-to-keep: 20
      - heavy-job:
          weight: 1
      - build-blocker:
          use-build-blocker: true
          blocking-jobs:
            - '{build-name}'
          block-level: 'GLOBAL'
          queue-scanning: 'BUILDABLE'

- property:
    name: test-property
    properties:
      - build-discarder:
          days-to-keep: 40
          num-to-keep: 40
          artifact-days-to-keep: 30
          artifact-num-to-keep: 20
      - heavy-job:
          weight: 1
      - throttle:
          max-per-node: 0
          max-total: 0
          enabled: true
          categories:
            - vcenter
            - dvs
            - nsxv
            - contrail
            - contrail-baremetal
            - gcs
            - mistral
            - manila
            - emc
            - zabbix
          option: category

- publisher:
    name: checker-publisher
    publishers:
      - archive:
          artifacts: '*.log'
          fingerprint: true
          allow-empty: true

- job-template:
    name: '{radon-name}'
    node: 'runner'
    concurrent: true
    disabled: false
    parameters:
      - string:
          name: GERRIT_BRANCH
          default: 'origin/{gerrit_branch}'
          description: 'The branch for fuel-qa gerrit'
      - string:
          name: GERRIT_REFSPEC
          default: 'refs/heads/{gerrit_branch}'
      - string:
          name: RADON_ARGS
          default: '--total-average -nb --ignore fuel-qa'
          description: "average complexity and files with B and worse rank"
      - string:
          name: XENON_ARGS
          default: '--ignore fuel-qa --max-absolute C --max-modules C --max-average C'
          description: "Default args for checking average code complexity"
    triggers:
      - draft-test-gerrit-trigger:
          gerrit_repo: '{gerrit_repo}'
          gerrit_branch: '{gerrit_branch}'
          skip_vote_successfull: '{skip_vote_successfull}'
          skip_vote_failed: '{skip_vote_failed}'
    scm:
      - common-scm:
          scm_submodule_disabled: '{scm_submodule_disabled}'
          scm_wipe_workspace: '{scm_wipe_workspace}'
          gerrit_repo: '{gerrit_repo}'

    wrappers: []
    properties:
      - heavy-job:
          weight: 1
    builders:
      - shell: |
          #!/bin/bash -xe
          radon cc ./ ${{RADON_ARGS}} | tee -i radon_cc.log
          radon mi ./ -nb --ignore fuel-qa | tee -i radon_mi.log
          set -o pipefail
          xenon ${{XENON_ARGS}} ./ | tee -i xenon.log
    publishers:
      - checker-publisher

- job-template:
    name: '{shellcheck-name}'
    node: 'runner'
    concurrent: true
    disabled: false
    triggers:
      - draft-gerrit-trigger:
          gerrit_repo: '{gerrit_repo}'
          gerrit_branch: '{gerrit_branch}'
          skip_vote_successfull: '{skip_vote_successfull}'
          skip_vote_failed: '{skip_vote_failed}'

    scm:
      - common-scm:
          scm_submodule_disabled: '{scm_submodule_disabled}'
          scm_wipe_workspace: '{scm_wipe_workspace}'
          gerrit_repo: '{gerrit_repo}'
    wrappers: []
    parameters:
      - string:
          name: GERRIT_BRANCH
          default: 'origin/{gerrit_branch}'
          description: 'The branch for fuel-qa gerrit'
      - string:
          name: GERRIT_REFSPEC
          default: 'refs/heads/{gerrit_branch}'
      - string:
          name: ARGS
          default: '-e SC2086,SC2046'
          description: 'shellcheck argurments'
    properties:
      - heavy-job:
          weight: 1
    builders:
      - shell: |
          #!/bin/bash -xe
          set -o pipefail
          if find . -name '*.sh' | grep sh; then
            shellcheck ${{ARGS}} $(find . -name '*.sh' -not -path "*/fuel-qa/*" -not -path "*/deployment_scripts/puppet/modules/contrail/files/cassandra-env.sh") | tee -i shellcheck.log
          else
            echo 'there are no shell files'
          fi
    publishers:
      - checker-publisher

- job-template:
    name: '{flake8-name}'
    node: 'runner'
    concurrent: true
    disabled: false
    wrappers: []
    triggers:
      - draft-test-gerrit-trigger:
          gerrit_repo: '{gerrit_repo}'
          gerrit_branch: '{gerrit_branch}'
          skip_vote_successfull: '{skip_vote_successfull}'
          skip_vote_failed: '{skip_vote_failed}'
    scm:
      - common-scm:
          scm_submodule_disabled: '{scm_submodule_disabled}'
          scm_wipe_workspace: '{scm_wipe_workspace}'
          gerrit_repo: '{gerrit_repo}'
    parameters:
      - string:
          name: GERRIT_BRANCH
          default: 'origin/{gerrit_branch}'
          description: 'The branch for fuel-qa gerrit'
      - string:
          name: GERRIT_REFSPEC
          default: 'refs/heads/{gerrit_branch}'
      - string:
          name: ARGS
          default: >
             --doctest --exclude .git,doc,specs,fuel-qa,__init__.py,./plugin_test/run_tests.py
             --select=H903,H201,H101,H105,H106,H904,H301,H303,H304,H401,H403,H404,H405,H501,H702,H703,H231,H232,H233,H234,H235,H236,H237,H238,H202,H203,H102,H103,H104 --show-source --statistics
          description: "Default args from fuel-qa gate job"
    properties:
      - heavy-job:
          weight: 1
    builders:
      - shell: |
          #!/bin/bash -xe
          set -o pipefail
          flake8 ${{ARGS}} ./ | tee -i flake8.log
    publishers:
      - checker-publisher

- job-template:
    name: '{reporter-name}'
    disabled: false
    description: 'The reporter for the {fuel_release}.{plugin-name}.{plugin_version}'
    concurrent: true
    node: runner
    properties:
      - heavy-job:
          weight: 1
    wrappers:
      - inject-passwords:
          global: true
          mask-password-params: true
    parameters:
      - string:
          name: PLUGIN_VERSION
          default: '{plugin_version}'
      - string:
          name: ISO_VERSION
          description: "ISO number for form the test plan string"
      - string:
          name: TEST_JOB_NAME
          description: "The name of a test for getting test results"
      - string:
          name: TEST_GROUP
          description: "The name of a test group"
      - string:
          name: DATE
          description: "The date of a test run"
          default: ''
      - string:
          name: TEST_JOB_BUILD_NUMBER
          description: "The number of a test build"
      - string:
          name: PKG_JOB_BUILD_NUMBER
          description: "The number of a pkg build"
      - string:
          name: JUNIPER_PKG_VERSION
          description: "Juniper package version(only for contrail)"
          default: ''
      - string:
          name: TREP_TESTRAIL_URL
          default: "https://mirantis.testrail.com"
          description: "Mirantis testrail url"
      - string:
          name: TREP_TESTRAIL_PROJECT
          default: "{testrail_project}"
          description: "Project name"
      - string:
          name: TREP_TESTRAIL_MILESTONE
          default: "{testrail_milestone}"
          description: "Testrail milestone (fuel release version is commonly used )"
      - string:
          name: TREP_TESTRAIL_SUITE
          default: "{testrail_suite}"
          description: "The test suite name, ex.[8.0][PCE] vCenter Smoke/BVT"
      - string:
          name: TREP_TESTRAIL_SUITE_CONFIGURATION
          default: "${{TEST_JOB_NAME}}:${{JENKINS_URL}}job/${{TEST_JOB_NAME}}/${{TEST_JOB_BUILD_NUMBER}}/console"
      - string:
          name: TREP_TESTRAIL_SUITE_DESCRIPTION
          default: "{testrail_suite_desc}"
          description: "Testrail suite description"
      - string:
          name: TREP_TESTRAIL_PLAN
          default: "{testrail_plan}"
          description: "Testrail testplan name"
      - string:
          name: TREP_TESTRAIL_PLAN_DESCRIPTION
          default: "{testrail_plan_desc}"
          description: "Testrail testplan description"
      - string:
          name: TREP_TESTRAIL_RUN
          default: "{testrail_run}"
          description: "Testrail test run name"
      - string:
          name: TREP_TESTRAIL_RUN_DESCRIPTION
          default: "{testrail_run_desc}"
          description: "Testrail test run description"
      - string:
          name: TREP_TESTRAIL_TEST_SECTION
          default: "All"
          description: "Section of test results"
      - string:
          name: TREP_TESTRAIL_TEST_INCLUDE
          default: ""
          description: "Tests to include to results"
      - string:
          name: TREP_TESTRAIL_TEST_EXCLUDE
          default: ""
          description: "Tests to exclude from results"
      - string:
          name: TREP_LOG_LEVEL
          default: "WARNING"
          description: "Log level of reporter"
      - string:
          name: TREP_LOG_FILE
          default: "testrail_reporter.log"
          description: "Log filename for reporter tool"
      - string:
          name: TREP_TEST_RESULTS_SOURCE
          default: "{trep_results_source}"
          description: "Reporter tool's additional config"
      - string:
          name: TREP_TEST_RESULTS_XUNIT_FILENAME
          default: "nosetests.xml"
          description: "File with tests results"
      - string:
          name: TREP_TEST_RESULTS_XUNIT_ITEMS_FILENAME
          default: "${{TREP_TEST_RESULTS_XUNIT_FILENAME}}"
          description: "File with tests results"
      - string:
          name: TREP_TEST_RESULTS_XUNIT_ITEMS_CASE_NAME
          default: "{testrail_item_case}"
          description: "Reporter tool's additional config"
    scm:
      - git:
          url: 'https://github.com/ehles/trep.git'
          branches:
            - 'origin/master'
          # choosing-strategy: default
          skip-tag: true
          clean:
            before: false
          wipe-workspace: false
    builders:
      - copyartifact:
          project: ${{TEST_JOB_NAME}}
          filter: ${{TREP_TEST_RESULTS_XUNIT_FILENAME}}
          which-build: specific-build
          build-number: ${{TEST_JOB_BUILD_NUMBER}}
          stable: true
      - shell:
          !include-raw-escape: builders/reporter.sh
    publishers:
      - reporter-publisher:
          properties_name: reporter.properties
          email_to: '{email_to}'

- parameter:
    name: doc-parameters
    parameters:
      - bool:
          name: CHECK_ONLY
          default: '{doc_check_only}'
          description: "check documentation format without commiting"
      - string:
          name: GERRIT_BRANCH
          default: 'origin/{gerrit_branch}'
      - string:
          name: GERRIT_REFSPEC
          default: 'refs/heads/{gerrit_branch}'
      - bool:
          name: DEBUG
          default: '{build_debug}'
      - bool:
          name: MODERN_MODEL
          default: '{doc_modern_model}'
          description: "enable use modern-testing-model, default = classic-testing-model"

- property:
    name: doc-properties
    properties:
      - build-discarder:
          days-to-keep: 40
          num-to-keep: 40
          artifact-days-to-keep: 30
          artifact-num-to-keep: 20
      - heavy-job:
          weight: 1
      - inject:
          properties-content: |
            TESTRAIL_URL=https://mirantis.testrail.com
            TESTRAIL_PROJECT={testrail_project}
            TESTRAIL_MILESTONE={testrail_milestone}
            TESTRAIL_SUITE={testrail_suite}
            TESTRAIL_CUSTOM_QA_TEAM={testrail_custom_qa_team}
            TESTRAIL_CREATE_SECTION={testrail_create_section}

- scm:
    name: doc-scm
    scm:
      - common-scm:
          scm_submodule_disabled: '{scm_submodule_disabled}'
          scm_wipe_workspace: '{scm_wipe_workspace}'
          gerrit_repo: '{gerrit_repo}'
          skip_vote_successfull: '{skip_vote_successfull}'
          skip_vote_failed: '{skip_vote_failed}'

      - git:
          wipe-workspace: 'false'
          url: 'https://github.com/ehles/rst2tr'
          branches:
             - origin/master
          basedir: utility-repo
